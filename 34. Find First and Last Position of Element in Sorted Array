class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)

        res = [-1 , -1]

        left = self.binarysearch(nums ,target, 0 , n-1, True )
        if left == -1 :
            return res
        right = self.binarysearch(nums ,target , 0 , n-1, False )
        res[0] = left
        res[1] = right

        return res
    
    def binarysearch(self, nums: List[int], t: int , l:int , r:int ,  left_bool :bool)->int:
        if(l<=r):
            mid = (r+l)//2

            if(nums[mid] == t):
                if left_bool :
                    l_index = self.binarysearch(nums , t , l , mid-1 ,left_bool )
                    if (l_index == -1) :
                        return mid 
                    return l_index

                else:
                    r_index = self.binarysearch(nums , t , mid+1 , r , left_bool)
                    if (r_index == -1):
                        return mid 
                    return r_index
            
            elif(nums[mid] < t):
                return self.binarysearch(nums ,t, mid+1 , r , left_bool)
            else :
                return self.binarysearch(nums ,t, l , mid-1 , left_bool)
        else:
            return -1
