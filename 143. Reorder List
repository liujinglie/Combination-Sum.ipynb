# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        current = head
        previous = None

        while current:
            nxt = current.next 

            current.next = previous
            previous = current
            current = nxt

        return previous
        

    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        fast = head
        slow = head

        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            
        reverse = self.reverseList(slow)
        start = head

        while reverse.next:
            
            nxt = start.next
            nxt2 = reverse.next

            start.next = reverse
            reverse.next = nxt

            start = nxt
            reverse = nxt2

        return head
