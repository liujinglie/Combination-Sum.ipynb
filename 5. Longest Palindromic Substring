class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) == 1:
            return s
        if len(s) == 2 and len(set(s)) == 2:
            return s[0]
        if len(s) == 2 and len(set(s)) == 1:
            return s

        def findPalindromLength(l,r,s):
            length = 1
            while l >= 0 and r <= len(s) - 1:
                if s[l] == s[r]:
                    length += 2
                    l -= 1
                    r += 1
                else:
                    return l + 1, r - 1
            if l < 0:
                l = 0
            else:
                l += 1
            if r > len(s) - 1:
                r = len(s) - 1
            else:
                r -= 1
            return l, r

        maxLen = -1
        ans = ""
        for i in range(1, len(s)):
            # if i == 0 or i == len(s) - 1:
            #     maxLen = 1
            #     continue
            if i > 0:
                left = i - 1
            if i < len(s) - 1:
                right = i + 1
            l, r = findPalindromLength(left, right, s)
            l1, r1 = findPalindromLength(left, i, s)
            if len(s[l:r+1]) > maxLen:
                maxLen = len(s[l:r+1])
                ans = s[l:r+1]
            if len(s[l1:r1+1]) > maxLen:
                maxLen = len(s[l1:r1+1])
                ans = s[l1:r1+1]
        return ans
